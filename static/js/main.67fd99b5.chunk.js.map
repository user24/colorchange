{"version":3,"sources":["components/yellowbutton.jsx","components/redbutton.jsx","components/bluebutton.jsx","components/purplebutton.jsx","App.js","serviceWorker.js","index.js"],"names":["YellowButton","props","makeYellow","event","document","body","style","bind","onClick","this","className","Component","RedButton","makeRed","BlueButton","makeBlue","PurpleButton","makePurple","App","display","justifyContent","alignItems","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAsBeA,E,YAlBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRC,WAAa,SAAAC,GACXC,SAASC,KAAKC,MAAQ,uBAJtB,EAAKJ,WAAa,EAAKA,WAAWK,KAAhB,gBAFD,E,sEAUjB,OACE,4BAAQC,QAASC,KAAKP,WAAYQ,UAAU,gBAA5C,uB,GAZqBC,aCkBZC,E,YAlBb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAIRY,QAAU,SAAAV,GACRC,SAASC,KAAKC,MAAQ,oBAJtB,EAAKO,QAAU,EAAKA,QAAQN,KAAb,gBAFE,E,sEAUjB,OACE,4BAAQC,QAASC,KAAKI,QAASH,UAAU,aAAzC,oB,GAZkBC,aCmBTG,E,YAlBb,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KAIRc,SAAW,SAAAZ,GACTC,SAASC,KAAKC,MAAQ,qBAJtB,EAAKS,SAAW,EAAKA,SAASR,KAAd,gBAFC,E,sEAUjB,OACE,4BAAQC,QAASC,KAAKM,SAAUL,UAAU,cAA1C,qB,GAZmBC,aCoBVK,E,YAlBb,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KAIRgB,WAAa,SAAAd,GACXC,SAASC,KAAKC,MAAQ,uBAJtB,EAAKW,WAAa,EAAKA,WAAWV,KAAhB,gBAFD,E,sEAUjB,OACE,4BAAQC,QAASC,KAAKQ,WAAYP,UAAU,gBAA5C,uB,GAZqBC,aCuBZO,E,iLAlBX,OACE,yBACEZ,MAAO,CACLa,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,UAAW,QAGb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAdUX,aCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAAS0B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.67fd99b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../index.css\";\n\nclass YellowButton extends Component {\n  constructor(props) {\n    super(props);\n    this.makeYellow = this.makeYellow.bind(this);\n  }\n\n  makeYellow = event => {\n    document.body.style = \"background: yellow;\";\n  };\n\n  render() {\n    return (\n      <button onClick={this.makeYellow} className=\"yellowButton\">\n        Make Me Yellow!\n      </button>\n    );\n  }\n}\n\nexport default YellowButton;\n","import React, { Component } from \"react\";\n\nclass RedButton extends Component {\n  constructor(props) {\n    super(props);\n    this.makeRed = this.makeRed.bind(this);\n  }\n\n  makeRed = event => {\n    document.body.style = \"background: red;\";\n  };\n\n  render() {\n    return (\n      <button onClick={this.makeRed} className=\"redButton\">\n        Make Me Red!\n      </button>\n    );\n  }\n}\n\nexport default RedButton;\n","import React, { Component } from \"react\";\n\nclass BlueButton extends Component {\n  constructor(props) {\n    super(props);\n    this.makeBlue = this.makeBlue.bind(this);\n  }\n\n  makeBlue = event => {\n    document.body.style = \"background: blue;\";\n  };\n\n  render() {\n    return (\n      <button onClick={this.makeBlue} className=\"blueButton\">\n        Make Me Blue!\n      </button>\n    );\n  }\n}\n\nexport default BlueButton;\n","import React, { Component } from \"react\";\nimport \"../index.css\";\n\nclass PurpleButton extends Component {\n  constructor(props) {\n    super(props);\n    this.makePurple = this.makePurple.bind(this);\n  }\n\n  makePurple = event => {\n    document.body.style = \"background: purple;\";\n  };\n\n  render() {\n    return (\n      <button onClick={this.makePurple} className=\"purpleButton\">\n        Make Me Purple!\n      </button>\n    );\n  }\n}\n\nexport default PurpleButton;\n","import React, { Component } from \"react\";\nimport YellowButton from \"./components/yellowbutton.jsx\";\nimport RedButton from \"./components/redbutton.jsx\";\nimport BlueButton from \"./components/bluebutton.jsx\";\nimport PurpleButton from \"./components/purplebutton.jsx\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          marginTop: \"15%\"\n        }}\n      >\n        <YellowButton />\n        <RedButton />\n        <BlueButton />\n        <PurpleButton />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}